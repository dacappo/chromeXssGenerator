package analytics.dacappo.sap.com;

import java.util.Iterator;

import dd.Finding;
import dd.Source;

public class ExploitGenerator {
	
	private static ExploitGenerator generator;
	
	
	/**
	* Implementation of Singleton Pattern
	* @return ExploitGenerator
	*/
	public static ExploitGenerator getExploitGenerator() {
		if(generator != null) {
			return generator;
		} else {
			generator = new ExploitGenerator();
			return generator;
		}
	}
	
	/**
	* Constructs an EXPLOITGENERATOR
	*/
	private ExploitGenerator() {
		
	}
	
	
	public void generateExploit(Finding finding, FindingCondition findingCondition, MatchResult matchResult, BypassCondition bypassCondition) {
		System.out.println(finding.getUrl() + " " + finding.getId());
		
		generateBreakOutSequence(finding, findingCondition, matchResult);
		
		// insert breakout payload breakin at right palce in url
		
		
	}
	
	private String generateBreakOutSequence(Finding finding, FindingCondition findingCondition, MatchResult matchResult) {
		
		System.out.println(findingCondition.getFlowPatern().getFlows().get(matchResult.getFlowPatternPosition()).getMarkupContext().getAttributeMarkup());
		
		Iterator<Source> sourceIterator = finding.getSources().values().iterator();		
		for(int i = 0; sourceIterator.hasNext(); i++) {
			Source source = sourceIterator.next();
			if( i == matchResult.getFlowPatternPosition()) {
				System.out.println(source.getSourcePart());
			}
			
			
			//MarkupContext<ConcreteAspect> markupContext;
			
		}
		
		return null;
	}
	
}
